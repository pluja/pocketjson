// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"pocketjson/ent/jsonstorage"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// JsonStorageCreate is the builder for creating a JsonStorage entity.
type JsonStorageCreate struct {
	config
	mutation *JsonStorageMutation
	hooks    []Hook
}

// SetData sets the "data" field.
func (jsc *JsonStorageCreate) SetData(s string) *JsonStorageCreate {
	jsc.mutation.SetData(s)
	return jsc
}

// SetExpiresAt sets the "expires_at" field.
func (jsc *JsonStorageCreate) SetExpiresAt(t time.Time) *JsonStorageCreate {
	jsc.mutation.SetExpiresAt(t)
	return jsc
}

// SetCreatorKey sets the "creator_key" field.
func (jsc *JsonStorageCreate) SetCreatorKey(s string) *JsonStorageCreate {
	jsc.mutation.SetCreatorKey(s)
	return jsc
}

// SetNillableCreatorKey sets the "creator_key" field if the given value is not nil.
func (jsc *JsonStorageCreate) SetNillableCreatorKey(s *string) *JsonStorageCreate {
	if s != nil {
		jsc.SetCreatorKey(*s)
	}
	return jsc
}

// SetID sets the "id" field.
func (jsc *JsonStorageCreate) SetID(s string) *JsonStorageCreate {
	jsc.mutation.SetID(s)
	return jsc
}

// Mutation returns the JsonStorageMutation object of the builder.
func (jsc *JsonStorageCreate) Mutation() *JsonStorageMutation {
	return jsc.mutation
}

// Save creates the JsonStorage in the database.
func (jsc *JsonStorageCreate) Save(ctx context.Context) (*JsonStorage, error) {
	jsc.defaults()
	return withHooks(ctx, jsc.sqlSave, jsc.mutation, jsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (jsc *JsonStorageCreate) SaveX(ctx context.Context) *JsonStorage {
	v, err := jsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (jsc *JsonStorageCreate) Exec(ctx context.Context) error {
	_, err := jsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jsc *JsonStorageCreate) ExecX(ctx context.Context) {
	if err := jsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (jsc *JsonStorageCreate) defaults() {
	if _, ok := jsc.mutation.CreatorKey(); !ok {
		v := jsonstorage.DefaultCreatorKey
		jsc.mutation.SetCreatorKey(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (jsc *JsonStorageCreate) check() error {
	if _, ok := jsc.mutation.Data(); !ok {
		return &ValidationError{Name: "data", err: errors.New(`ent: missing required field "JsonStorage.data"`)}
	}
	if _, ok := jsc.mutation.ExpiresAt(); !ok {
		return &ValidationError{Name: "expires_at", err: errors.New(`ent: missing required field "JsonStorage.expires_at"`)}
	}
	if _, ok := jsc.mutation.CreatorKey(); !ok {
		return &ValidationError{Name: "creator_key", err: errors.New(`ent: missing required field "JsonStorage.creator_key"`)}
	}
	return nil
}

func (jsc *JsonStorageCreate) sqlSave(ctx context.Context) (*JsonStorage, error) {
	if err := jsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := jsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, jsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected JsonStorage.ID type: %T", _spec.ID.Value)
		}
	}
	jsc.mutation.id = &_node.ID
	jsc.mutation.done = true
	return _node, nil
}

func (jsc *JsonStorageCreate) createSpec() (*JsonStorage, *sqlgraph.CreateSpec) {
	var (
		_node = &JsonStorage{config: jsc.config}
		_spec = sqlgraph.NewCreateSpec(jsonstorage.Table, sqlgraph.NewFieldSpec(jsonstorage.FieldID, field.TypeString))
	)
	if id, ok := jsc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := jsc.mutation.Data(); ok {
		_spec.SetField(jsonstorage.FieldData, field.TypeString, value)
		_node.Data = value
	}
	if value, ok := jsc.mutation.ExpiresAt(); ok {
		_spec.SetField(jsonstorage.FieldExpiresAt, field.TypeTime, value)
		_node.ExpiresAt = value
	}
	if value, ok := jsc.mutation.CreatorKey(); ok {
		_spec.SetField(jsonstorage.FieldCreatorKey, field.TypeString, value)
		_node.CreatorKey = value
	}
	return _node, _spec
}

// JsonStorageCreateBulk is the builder for creating many JsonStorage entities in bulk.
type JsonStorageCreateBulk struct {
	config
	err      error
	builders []*JsonStorageCreate
}

// Save creates the JsonStorage entities in the database.
func (jscb *JsonStorageCreateBulk) Save(ctx context.Context) ([]*JsonStorage, error) {
	if jscb.err != nil {
		return nil, jscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(jscb.builders))
	nodes := make([]*JsonStorage, len(jscb.builders))
	mutators := make([]Mutator, len(jscb.builders))
	for i := range jscb.builders {
		func(i int, root context.Context) {
			builder := jscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*JsonStorageMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, jscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, jscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, jscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (jscb *JsonStorageCreateBulk) SaveX(ctx context.Context) []*JsonStorage {
	v, err := jscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (jscb *JsonStorageCreateBulk) Exec(ctx context.Context) error {
	_, err := jscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jscb *JsonStorageCreateBulk) ExecX(ctx context.Context) {
	if err := jscb.Exec(ctx); err != nil {
		panic(err)
	}
}
