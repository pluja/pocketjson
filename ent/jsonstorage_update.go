// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"pocketjson/ent/jsonstorage"
	"pocketjson/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// JsonStorageUpdate is the builder for updating JsonStorage entities.
type JsonStorageUpdate struct {
	config
	hooks    []Hook
	mutation *JsonStorageMutation
}

// Where appends a list predicates to the JsonStorageUpdate builder.
func (jsu *JsonStorageUpdate) Where(ps ...predicate.JsonStorage) *JsonStorageUpdate {
	jsu.mutation.Where(ps...)
	return jsu
}

// SetData sets the "data" field.
func (jsu *JsonStorageUpdate) SetData(s string) *JsonStorageUpdate {
	jsu.mutation.SetData(s)
	return jsu
}

// SetNillableData sets the "data" field if the given value is not nil.
func (jsu *JsonStorageUpdate) SetNillableData(s *string) *JsonStorageUpdate {
	if s != nil {
		jsu.SetData(*s)
	}
	return jsu
}

// SetExpiresAt sets the "expires_at" field.
func (jsu *JsonStorageUpdate) SetExpiresAt(t time.Time) *JsonStorageUpdate {
	jsu.mutation.SetExpiresAt(t)
	return jsu
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (jsu *JsonStorageUpdate) SetNillableExpiresAt(t *time.Time) *JsonStorageUpdate {
	if t != nil {
		jsu.SetExpiresAt(*t)
	}
	return jsu
}

// SetCreatorKey sets the "creator_key" field.
func (jsu *JsonStorageUpdate) SetCreatorKey(s string) *JsonStorageUpdate {
	jsu.mutation.SetCreatorKey(s)
	return jsu
}

// SetNillableCreatorKey sets the "creator_key" field if the given value is not nil.
func (jsu *JsonStorageUpdate) SetNillableCreatorKey(s *string) *JsonStorageUpdate {
	if s != nil {
		jsu.SetCreatorKey(*s)
	}
	return jsu
}

// Mutation returns the JsonStorageMutation object of the builder.
func (jsu *JsonStorageUpdate) Mutation() *JsonStorageMutation {
	return jsu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (jsu *JsonStorageUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, jsu.sqlSave, jsu.mutation, jsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (jsu *JsonStorageUpdate) SaveX(ctx context.Context) int {
	affected, err := jsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (jsu *JsonStorageUpdate) Exec(ctx context.Context) error {
	_, err := jsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jsu *JsonStorageUpdate) ExecX(ctx context.Context) {
	if err := jsu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (jsu *JsonStorageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(jsonstorage.Table, jsonstorage.Columns, sqlgraph.NewFieldSpec(jsonstorage.FieldID, field.TypeString))
	if ps := jsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := jsu.mutation.Data(); ok {
		_spec.SetField(jsonstorage.FieldData, field.TypeString, value)
	}
	if value, ok := jsu.mutation.ExpiresAt(); ok {
		_spec.SetField(jsonstorage.FieldExpiresAt, field.TypeTime, value)
	}
	if value, ok := jsu.mutation.CreatorKey(); ok {
		_spec.SetField(jsonstorage.FieldCreatorKey, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, jsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{jsonstorage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	jsu.mutation.done = true
	return n, nil
}

// JsonStorageUpdateOne is the builder for updating a single JsonStorage entity.
type JsonStorageUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *JsonStorageMutation
}

// SetData sets the "data" field.
func (jsuo *JsonStorageUpdateOne) SetData(s string) *JsonStorageUpdateOne {
	jsuo.mutation.SetData(s)
	return jsuo
}

// SetNillableData sets the "data" field if the given value is not nil.
func (jsuo *JsonStorageUpdateOne) SetNillableData(s *string) *JsonStorageUpdateOne {
	if s != nil {
		jsuo.SetData(*s)
	}
	return jsuo
}

// SetExpiresAt sets the "expires_at" field.
func (jsuo *JsonStorageUpdateOne) SetExpiresAt(t time.Time) *JsonStorageUpdateOne {
	jsuo.mutation.SetExpiresAt(t)
	return jsuo
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (jsuo *JsonStorageUpdateOne) SetNillableExpiresAt(t *time.Time) *JsonStorageUpdateOne {
	if t != nil {
		jsuo.SetExpiresAt(*t)
	}
	return jsuo
}

// SetCreatorKey sets the "creator_key" field.
func (jsuo *JsonStorageUpdateOne) SetCreatorKey(s string) *JsonStorageUpdateOne {
	jsuo.mutation.SetCreatorKey(s)
	return jsuo
}

// SetNillableCreatorKey sets the "creator_key" field if the given value is not nil.
func (jsuo *JsonStorageUpdateOne) SetNillableCreatorKey(s *string) *JsonStorageUpdateOne {
	if s != nil {
		jsuo.SetCreatorKey(*s)
	}
	return jsuo
}

// Mutation returns the JsonStorageMutation object of the builder.
func (jsuo *JsonStorageUpdateOne) Mutation() *JsonStorageMutation {
	return jsuo.mutation
}

// Where appends a list predicates to the JsonStorageUpdate builder.
func (jsuo *JsonStorageUpdateOne) Where(ps ...predicate.JsonStorage) *JsonStorageUpdateOne {
	jsuo.mutation.Where(ps...)
	return jsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (jsuo *JsonStorageUpdateOne) Select(field string, fields ...string) *JsonStorageUpdateOne {
	jsuo.fields = append([]string{field}, fields...)
	return jsuo
}

// Save executes the query and returns the updated JsonStorage entity.
func (jsuo *JsonStorageUpdateOne) Save(ctx context.Context) (*JsonStorage, error) {
	return withHooks(ctx, jsuo.sqlSave, jsuo.mutation, jsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (jsuo *JsonStorageUpdateOne) SaveX(ctx context.Context) *JsonStorage {
	node, err := jsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (jsuo *JsonStorageUpdateOne) Exec(ctx context.Context) error {
	_, err := jsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jsuo *JsonStorageUpdateOne) ExecX(ctx context.Context) {
	if err := jsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (jsuo *JsonStorageUpdateOne) sqlSave(ctx context.Context) (_node *JsonStorage, err error) {
	_spec := sqlgraph.NewUpdateSpec(jsonstorage.Table, jsonstorage.Columns, sqlgraph.NewFieldSpec(jsonstorage.FieldID, field.TypeString))
	id, ok := jsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "JsonStorage.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := jsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, jsonstorage.FieldID)
		for _, f := range fields {
			if !jsonstorage.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != jsonstorage.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := jsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := jsuo.mutation.Data(); ok {
		_spec.SetField(jsonstorage.FieldData, field.TypeString, value)
	}
	if value, ok := jsuo.mutation.ExpiresAt(); ok {
		_spec.SetField(jsonstorage.FieldExpiresAt, field.TypeTime, value)
	}
	if value, ok := jsuo.mutation.CreatorKey(); ok {
		_spec.SetField(jsonstorage.FieldCreatorKey, field.TypeString, value)
	}
	_node = &JsonStorage{config: jsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, jsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{jsonstorage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	jsuo.mutation.done = true
	return _node, nil
}
