// Code generated by ent, DO NOT EDIT.

package jsonstorage

import (
	"pocketjson/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.JsonStorage {
	return predicate.JsonStorage(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.JsonStorage {
	return predicate.JsonStorage(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.JsonStorage {
	return predicate.JsonStorage(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.JsonStorage {
	return predicate.JsonStorage(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.JsonStorage {
	return predicate.JsonStorage(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.JsonStorage {
	return predicate.JsonStorage(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.JsonStorage {
	return predicate.JsonStorage(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.JsonStorage {
	return predicate.JsonStorage(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.JsonStorage {
	return predicate.JsonStorage(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.JsonStorage {
	return predicate.JsonStorage(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.JsonStorage {
	return predicate.JsonStorage(sql.FieldContainsFold(FieldID, id))
}

// Data applies equality check predicate on the "data" field. It's identical to DataEQ.
func Data(v string) predicate.JsonStorage {
	return predicate.JsonStorage(sql.FieldEQ(FieldData, v))
}

// ExpiresAt applies equality check predicate on the "expires_at" field. It's identical to ExpiresAtEQ.
func ExpiresAt(v time.Time) predicate.JsonStorage {
	return predicate.JsonStorage(sql.FieldEQ(FieldExpiresAt, v))
}

// CreatorKey applies equality check predicate on the "creator_key" field. It's identical to CreatorKeyEQ.
func CreatorKey(v string) predicate.JsonStorage {
	return predicate.JsonStorage(sql.FieldEQ(FieldCreatorKey, v))
}

// DataEQ applies the EQ predicate on the "data" field.
func DataEQ(v string) predicate.JsonStorage {
	return predicate.JsonStorage(sql.FieldEQ(FieldData, v))
}

// DataNEQ applies the NEQ predicate on the "data" field.
func DataNEQ(v string) predicate.JsonStorage {
	return predicate.JsonStorage(sql.FieldNEQ(FieldData, v))
}

// DataIn applies the In predicate on the "data" field.
func DataIn(vs ...string) predicate.JsonStorage {
	return predicate.JsonStorage(sql.FieldIn(FieldData, vs...))
}

// DataNotIn applies the NotIn predicate on the "data" field.
func DataNotIn(vs ...string) predicate.JsonStorage {
	return predicate.JsonStorage(sql.FieldNotIn(FieldData, vs...))
}

// DataGT applies the GT predicate on the "data" field.
func DataGT(v string) predicate.JsonStorage {
	return predicate.JsonStorage(sql.FieldGT(FieldData, v))
}

// DataGTE applies the GTE predicate on the "data" field.
func DataGTE(v string) predicate.JsonStorage {
	return predicate.JsonStorage(sql.FieldGTE(FieldData, v))
}

// DataLT applies the LT predicate on the "data" field.
func DataLT(v string) predicate.JsonStorage {
	return predicate.JsonStorage(sql.FieldLT(FieldData, v))
}

// DataLTE applies the LTE predicate on the "data" field.
func DataLTE(v string) predicate.JsonStorage {
	return predicate.JsonStorage(sql.FieldLTE(FieldData, v))
}

// DataContains applies the Contains predicate on the "data" field.
func DataContains(v string) predicate.JsonStorage {
	return predicate.JsonStorage(sql.FieldContains(FieldData, v))
}

// DataHasPrefix applies the HasPrefix predicate on the "data" field.
func DataHasPrefix(v string) predicate.JsonStorage {
	return predicate.JsonStorage(sql.FieldHasPrefix(FieldData, v))
}

// DataHasSuffix applies the HasSuffix predicate on the "data" field.
func DataHasSuffix(v string) predicate.JsonStorage {
	return predicate.JsonStorage(sql.FieldHasSuffix(FieldData, v))
}

// DataEqualFold applies the EqualFold predicate on the "data" field.
func DataEqualFold(v string) predicate.JsonStorage {
	return predicate.JsonStorage(sql.FieldEqualFold(FieldData, v))
}

// DataContainsFold applies the ContainsFold predicate on the "data" field.
func DataContainsFold(v string) predicate.JsonStorage {
	return predicate.JsonStorage(sql.FieldContainsFold(FieldData, v))
}

// ExpiresAtEQ applies the EQ predicate on the "expires_at" field.
func ExpiresAtEQ(v time.Time) predicate.JsonStorage {
	return predicate.JsonStorage(sql.FieldEQ(FieldExpiresAt, v))
}

// ExpiresAtNEQ applies the NEQ predicate on the "expires_at" field.
func ExpiresAtNEQ(v time.Time) predicate.JsonStorage {
	return predicate.JsonStorage(sql.FieldNEQ(FieldExpiresAt, v))
}

// ExpiresAtIn applies the In predicate on the "expires_at" field.
func ExpiresAtIn(vs ...time.Time) predicate.JsonStorage {
	return predicate.JsonStorage(sql.FieldIn(FieldExpiresAt, vs...))
}

// ExpiresAtNotIn applies the NotIn predicate on the "expires_at" field.
func ExpiresAtNotIn(vs ...time.Time) predicate.JsonStorage {
	return predicate.JsonStorage(sql.FieldNotIn(FieldExpiresAt, vs...))
}

// ExpiresAtGT applies the GT predicate on the "expires_at" field.
func ExpiresAtGT(v time.Time) predicate.JsonStorage {
	return predicate.JsonStorage(sql.FieldGT(FieldExpiresAt, v))
}

// ExpiresAtGTE applies the GTE predicate on the "expires_at" field.
func ExpiresAtGTE(v time.Time) predicate.JsonStorage {
	return predicate.JsonStorage(sql.FieldGTE(FieldExpiresAt, v))
}

// ExpiresAtLT applies the LT predicate on the "expires_at" field.
func ExpiresAtLT(v time.Time) predicate.JsonStorage {
	return predicate.JsonStorage(sql.FieldLT(FieldExpiresAt, v))
}

// ExpiresAtLTE applies the LTE predicate on the "expires_at" field.
func ExpiresAtLTE(v time.Time) predicate.JsonStorage {
	return predicate.JsonStorage(sql.FieldLTE(FieldExpiresAt, v))
}

// CreatorKeyEQ applies the EQ predicate on the "creator_key" field.
func CreatorKeyEQ(v string) predicate.JsonStorage {
	return predicate.JsonStorage(sql.FieldEQ(FieldCreatorKey, v))
}

// CreatorKeyNEQ applies the NEQ predicate on the "creator_key" field.
func CreatorKeyNEQ(v string) predicate.JsonStorage {
	return predicate.JsonStorage(sql.FieldNEQ(FieldCreatorKey, v))
}

// CreatorKeyIn applies the In predicate on the "creator_key" field.
func CreatorKeyIn(vs ...string) predicate.JsonStorage {
	return predicate.JsonStorage(sql.FieldIn(FieldCreatorKey, vs...))
}

// CreatorKeyNotIn applies the NotIn predicate on the "creator_key" field.
func CreatorKeyNotIn(vs ...string) predicate.JsonStorage {
	return predicate.JsonStorage(sql.FieldNotIn(FieldCreatorKey, vs...))
}

// CreatorKeyGT applies the GT predicate on the "creator_key" field.
func CreatorKeyGT(v string) predicate.JsonStorage {
	return predicate.JsonStorage(sql.FieldGT(FieldCreatorKey, v))
}

// CreatorKeyGTE applies the GTE predicate on the "creator_key" field.
func CreatorKeyGTE(v string) predicate.JsonStorage {
	return predicate.JsonStorage(sql.FieldGTE(FieldCreatorKey, v))
}

// CreatorKeyLT applies the LT predicate on the "creator_key" field.
func CreatorKeyLT(v string) predicate.JsonStorage {
	return predicate.JsonStorage(sql.FieldLT(FieldCreatorKey, v))
}

// CreatorKeyLTE applies the LTE predicate on the "creator_key" field.
func CreatorKeyLTE(v string) predicate.JsonStorage {
	return predicate.JsonStorage(sql.FieldLTE(FieldCreatorKey, v))
}

// CreatorKeyContains applies the Contains predicate on the "creator_key" field.
func CreatorKeyContains(v string) predicate.JsonStorage {
	return predicate.JsonStorage(sql.FieldContains(FieldCreatorKey, v))
}

// CreatorKeyHasPrefix applies the HasPrefix predicate on the "creator_key" field.
func CreatorKeyHasPrefix(v string) predicate.JsonStorage {
	return predicate.JsonStorage(sql.FieldHasPrefix(FieldCreatorKey, v))
}

// CreatorKeyHasSuffix applies the HasSuffix predicate on the "creator_key" field.
func CreatorKeyHasSuffix(v string) predicate.JsonStorage {
	return predicate.JsonStorage(sql.FieldHasSuffix(FieldCreatorKey, v))
}

// CreatorKeyEqualFold applies the EqualFold predicate on the "creator_key" field.
func CreatorKeyEqualFold(v string) predicate.JsonStorage {
	return predicate.JsonStorage(sql.FieldEqualFold(FieldCreatorKey, v))
}

// CreatorKeyContainsFold applies the ContainsFold predicate on the "creator_key" field.
func CreatorKeyContainsFold(v string) predicate.JsonStorage {
	return predicate.JsonStorage(sql.FieldContainsFold(FieldCreatorKey, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.JsonStorage) predicate.JsonStorage {
	return predicate.JsonStorage(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.JsonStorage) predicate.JsonStorage {
	return predicate.JsonStorage(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.JsonStorage) predicate.JsonStorage {
	return predicate.JsonStorage(sql.NotPredicates(p))
}
